#importing pandas library
import pandas as pd

# loading the source file by mentioning the file path
load_file = pd.read_excel('C:/Users/prada/Documents/census_2011.xlsx',sheet_name='census_2011.csv')
print(load_file)

# converting that loaded file into dataframe to do the data cleaning process
df = pd.DataFrame(load_file)
df

# renaming the column names
df.rename(columns={'District code':'District_code','State name': 'State/UT','District name':'District',
                    'Male_Literate':'Literate_Male','Female_Literate':'Literate_Female',
                    'Rural_Households':'Households_Rural','Urban_Households':'Households_Urban',
                    'Age_Group_0_29':'Young_and_Adult','Age_Group_30_49':'Middle_Aged',
                    'Age_Group_50':'Senior_Citizen','Age not stated':'Age_Not_Stated',
                    "Households_with_Bicycle": "HouseholdsBicycle",
                        "Households_with_Car_Jeep_Van": "HouseholdsCarJeepVan",
                        "Households_with_Radio_Transistor": "HouseholdsRadioTransistor",
                        "Households_with_Scooter_Motorcycle_Moped": "HouseholdsScooterMotorcycleMoped",
                        "Households_with_Telephone_Mobile_Phone_Landline_only": "HouseholdsPhoneLandlineOnly",
                        "Households_with_Telephone_Mobile_Phone_Mobile_only": "HouseholdsPhoneMobileOnly",
                        "Households_with_TV_Computer_Laptop_Telephone_mobile_phone_and_Scooter_Car": "HouseholdsTechVehicles",
                        "Households_with_Television": "HouseholdsTelevision",
                        "Households_with_Telephone_Mobile_Phone": "HouseholdsPhone",
                        "Households_with_Telephone_Mobile_Phone_Both": "HouseholdsPhoneBoth",
                        "Condition_of_occupied_census_houses_Dilapidated_Households": "DilapidatedHouseholds",
                        "Households_with_separate_kitchen_Cooking_inside_house": "HouseholdsSeparateKitchen",
                        "Having_bathing_facility_Total_Households": "HouseholdsBathingFacility",
                        "Having_latrine_facility_within_the_premises_Total_Households": "HouseholdsLatrineFacility",
                        "Ownership_Owned_Households": "OwnedHouseholds",
                        "Ownership_Rented_Households": "RentedHouseholds",
                        "Type_of_bathing_facility_Enclosure_without_roof_Households": "HouseholdsBathEnclosureNoRoof",
                        "Type_of_fuel_used_for_cooking_Any_other_Households": "HouseholdsOtherFuel",
                        "Type_of_latrine_facility_Pit_latrine_Households": "HouseholdsPitLatrine",
                        "Type_of_latrine_facility_Other_latrine_Households": "HouseholdsOtherLatrine",
                        "Type_of_latrine_facility_Night_soil_disposed_into_open_drain_Households": "HouseholdsNightSoilDrain",
                        "Type_of_latrine_facility_Flush_pour_flush_latrine_connected_to_other_system_Households": "HouseholdsFlushLatrineSystem",
                        "Not_having_bathing_facility_within_the_premises_Total_Households": "NoBathingFacilityHouseholds",
                        "Not_having_latrine_facility_within_the_premises_Alternative_source_Open_Households": "NoLatrineOpenSource",
                        "Main_source_of_drinking_water_Un_covered_well_Households": "HouseholdsUncoveredWell",
                        "Main_source_of_drinking_water_Handpump_Tubewell_Borewell_Households": "HouseholdsHandpumpBorewell",
                        "Main_source_of_drinking_water_Spring_Households": "HouseholdsSpringWater",
                        "Main_source_of_drinking_water_River_Canal_Households": "HouseholdsRiverCanal",
                        "Main_source_of_drinking_water_Other_sources_Households": "HouseholdsOtherWaterSources",
                        "Main_source_of_drinking_water_Other_sources_Spring_River_Canal_Tank_Pond_Lake_Other_sources__Households": "HouseholdsAllWaterSources",
                        "Location_of_drinking_water_source_Near_the_premises_Households": "WaterSourceNearPremises",
                        "Location_of_drinking_water_source_Within_the_premises_Households": "WaterSourceWithinPremises",
                        "Main_source_of_drinking_water_Tank_Pond_Lake_Households": "HouseholdsTankPondLake",
                        "Main_source_of_drinking_water_Tapwater_Households": "HouseholdsTapwater",
                        "Main_source_of_drinking_water_Tubewell_Borehole_Households": "HouseholdsTubewellBorehole",
                        "Household_size_1_person_Households": "Household1Person",
                        "Household_size_2_persons_Households": "Household2Persons",
                        "Household_size_1_to_2_persons": "Household1to2Persons",
                        "Household_size_3_persons_Households": "Household3Persons",
                        "Household_size_3_to_5_persons_Households": "Household3to5Persons",
                        "Household_size_4_persons_Households": "Household4Persons",
                        "Household_size_5_persons_Households": "Household5Persons",
                        "Household_size_6_8_persons_Households": "Household6to8Persons",
                        "Household_size_9_persons_and_above_Households": "Household9PlusPersons",
                        "Location_of_drinking_water_source_Away_Households": "WaterSourceAway",
                        "Married_couples_1_Households": "Household1Couple",
                        "Married_couples_2_Households": "Household2Couples",
                        "Married_couples_3_Households": "Household3Couples",
                        "Married_couples_3_or_more_Households": "Household3PlusCouples",
                        "Married_couples_4_Households": "Household4Couples",
                        "Married_couples_5__Households": "Household5Couples",
                        "Married_couples_None_Households": "HouseholdNoCouples",
                        "Power_Parity_Less_than_Rs_45000": "PowerParityBelow45000",
                        "Power_Parity_Rs_45000_90000": "PowerParity45000to90000",
                        "Power_Parity_Rs_90000_150000": "PowerParity90000to150000",
                        "Power_Parity_Rs_45000_150000": "PowerParity45000to150000",
                        "Power_Parity_Rs_150000_240000": "PowerParity150000to240000",
                        "Power_Parity_Rs_240000_330000": "PowerParity240000to330000",
                        "Power_Parity_Rs_150000_330000": "PowerParity150000to330000",
                        "Power_Parity_Rs_330000_425000": "PowerParity330000to425000",
                        "Power_Parity_Rs_425000_545000": "PowerParity425000to545000",
                        "Power_Parity_Rs_330000_545000": "PowerParity330000to545000",
                        "Power_Parity_Above_Rs_545000": "PowerParityAbove545000",
                        "Total_Power_Parity": "TotalPowerParity"},inplace=True)
df


# Changing the State name to asked format
def format_state_name(name):
    words = name.split()
    formatted_words = [word.capitalize() if word.lower() != 'and' else word.lower() for word in words]
    return ' '.join(formatted_words)  

df['State/UT'] = df['State/UT'].apply(format_state_name)

df


# Adding Telangana state to specific districts

telangana_districts = ['Adilabad', 'Nizamabad','Karimnagar','Medak','Hyderabad','Rangareddy','Mahbubnagar','Nalgonda','Warangal','Khammam']

df.loc[df['District'].isin(telangana_districts), 'State/UT'] = 'Telangana'
df


# Adding Ladakh state to specific districts

ladakh_districts = ['Leh(Ladakh)','Kargil']

df.loc[df['District'].isin(ladakh_districts), 'State/UT'] = 'Ladakh'
df

# finding missing values before filling null values
missing_populatio_sum_before = df['Population'].isnull().sum()
missing_populatio_sum_before

# updating missing values
df['Population'] = df['Population'].fillna(df['Male'] + df['Female'])

# finding missing values after filling null values
missing_populatio_sum_after = df['Population'].isnull().sum()
missing_populatio_sum_after

# finding missing values before filling null values
missing_literate_sum_before = df['Literate'].isnull().sum()
missing_literate_sum_before

# updating missing values
df['Literate'] = df['Literate'].fillna(df['Literate_Male'] + df['Literate_Male'])

# finding missing values after filling null values
missing_literate_sum_after = df['Literate'].isnull().sum()
missing_literate_sum_after

# finding missing values before filling null values
missing_popu_sum_before = df['Population'].isnull().sum()
missing_popu_sum_before

# updating missing values
df['Population'] = df['Population'].fillna(df['Young_and_Adult'] + df['Middle_Aged'] + df['Senior_Citizen'] + df['Age_Not_Stated'])

# finding missing values after filling null values
missing_popu_sum_after = df['Population'].isnull().sum()
missing_popu_sum_after

# finding missing values before filling null values
missing_Households_sum_before = df['Households'].isnull().sum()
missing_Households_sum_before

# updating missing values
df['Households'] = df['Households'].fillna(df['Households_Rural'] + df['Households_Urban'])

# finding missing values after filling null values
missing_Households_sum_after = df['Households'].isnull().sum()
missing_Households_sum_after

# Making connection with Mongodb
import pymongo
client = pymongo.MongoClient('localhost', 27017)
db = client['Project_Census']
collection = db['census']

# inserting the cleaned record into the Mongodb
data = df.to_dict('records')
collection.insert_many(data)

# fetching data from Mongodb
a = list(collection.find())
a

# converting into dataframe to load into relational database
df1 = pd.DataFrame(a)
df1.drop('_id',axis=1, inplace = True)
df1

# installing sqlalchemy package
pip install sqlalchemy

#making conenction with Mysql 

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="root",
  auth_plugin='mysql_native_password'
)
mycursor = mydb.cursor()

# creating database
mycursor.execute("CREATE DATABASE Project_Census")

# required deatils to load the dataframe to sql
username = 'root'
password = 'root'
host = 'localhost'
port = '3306'  # usually 3306
database = 'Project_Census'

# creating engine and loading the date to sql
from sqlalchemy import create_engine
engine = create_engine(f'mysql+mysqlconnector://{username}:{password}@{host}:{port}/{database}')
df1.to_sql('census_data', con=engine, if_exists='replace', index=False)

# Importing required packages
import mysql.connector
import streamlit as st
import pandas as pd

# Making connection with the relational database
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="root",
  auth_plugin='mysql_native_password'
)

# Creating cursor
mycursor = mydb.cursor()

mycursor.execute("use project_census")  # Specify the database you want to use

# Question No.1
st.write("What is the total population of each district")

#query for the question
mycursor.execute("Select District, SUM(Population) as Population from census_data group by District order by District")

# Fetching data from the relational database
myresult = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df=pd.DataFrame(myresult)

# Display the DataFrame as a table in Streamlit
st.table(df)



# Question No.2
st.write("How many literate males and females are there in each district")

#query for the question
mycursor.execute("Select District, Sum(Literate_Male), sum(Literate_Female) from census_data group by District order by District")

# Fetching data from the relational database
myresult1 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df1=pd.DataFrame(myresult1)

# Display the DataFrame as a table in Streamlit
st.table(df1)



# Question No.3
st.write("What is the percentage of workers (both male and female) in each district")

#query for the question
mycursor.execute("Select District, (sum(Workers) / sum(Population)) * 100 as percentage_of_workers from census_data group by District order by District")

# Fetching data from the relational database
myresult2 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df2=pd.DataFrame(myresult2)

# Display the DataFrame as a table in Streamlit
st.table(df2)



# Question No.4
st.write("How many households have access to LPG or PNG as a cooking fuel in each district")

#query for the question
mycursor.execute("Select District, sum(LPG_or_PNG_Households) as households from census_data group by District order by District")

# Fetching data from the relational database
myresult3 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df3=pd.DataFrame(myresult3)

# Display the DataFrame as a table in Streamlit
st.table(df3)



# Question No.5
st.write("What is the religious composition (Hindus, Muslims, Christians, etc.) of each district")

#query for the question
mycursor.execute("Select District, sum(Hindus + Muslims + Christians + Sikhs + Buddhists + Jains + Others_Religions + Religion_Not_Stated) as composition_religion from census_data group by District order by District")

# Fetching data from the relational database
myresult4 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df4=pd.DataFrame(myresult4)

# Display the DataFrame as a table in Streamlit
st.table(df4)



# Question No.6
st.write("How many households have internet access in each district")

#query for the question
mycursor.execute("Select District, sum(Households_with_Internet) from census_data group by District order by District")

# Fetching data from the relational database
myresult5 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df5=pd.DataFrame(myresult5)

# Display the DataFrame as a table in Streamlit
st.table(df5)



# Question No.7
st.write("What is the educational attainment distribution (below primary, primary, middle, secondary, etc.) in each district")

#query for the question
mycursor.execute("Select District, sum(Below_Primary_Education) as below_primary_education, sum(Primary_Education) as primary_education, sum(Middle_Education) as middle_education, sum(Secondary_Education) as secondary_education, sum(Higher_Education) as higher_education, sum(Graduate_Education) as graduate_education, sum(Other_Education) as other_education, sum(Literate_Education) as Literate_Education, sum(Illiterate_Education) as Illiterate_Education from census_data group by District order by District")

# Fetching data from the relational database
myresult6 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df6=pd.DataFrame(myresult6)

# Display the DataFrame as a table in Streamlit
st.table(df6)



# Question No.8
st.write("How many households have access to various modes of transportation (bicycle, car, radio, television, etc.) in each district")

#query for the question
mycursor.execute("Select District, sum(HouseholdsBicycle) as HouseholdsBicycle, sum(HouseholdsCarJeepVan) as HouseholdsCarJeepVan, sum(HouseholdsRadioTransistor) as HouseholdsRadioTransistor, sum(HouseholdsScooterMotorcycleMoped) as HouseholdsScooterMotorcycleMoped from census_data group by District order by District")

# Fetching data from the relational database
myresult7 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df7=pd.DataFrame(myresult7)

# Display the DataFrame as a table in Streamlit
st.table(df7)



# Question No.9
st.write("What is the condition of occupied census houses (dilapidated, with separate kitchen, with bathing facility, with latrine facility, etc.) in each district")

#query for the question
mycursor.execute("Select District, sum(DilapidatedHouseholds) as DilapidatedHouseholds, sum(HouseholdsSeparateKitchen) as HouseholdsSeparateKitchen, sum(HouseholdsBathingFacility) as HouseholdsBathingFacility, sum(HouseholdsLatrineFacility) as HouseholdsLatrineFacility from census_data group by District order by District")

# Fetching data from the relational database
myresult8 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df8=pd.DataFrame(myresult8)

# Display the DataFrame as a table in Streamlit
st.table(df8)



# Question No.10
st.write("How is the household size distributed (1 person, 2 persons, 3-5 persons, etc.) in each district")

#query for the question
mycursor.execute("Select District, sum(Household1Person) as Household1Person, sum(Household2Persons) as Household2Persons, sum(Household3Persons) as Household3Persons, sum(Household3to5Persons) as Household3to5Persons, sum(Household4Persons) as Household4Persons, sum(Household5Persons) as Household5Persons, sum(Household6to8Persons) as Household6to8Persons, sum(Household9PlusPersons) as Household9PlusPersons from census_data group by District order by District")

# Fetching data from the relational database
myresult9 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df9=pd.DataFrame(myresult9)

# Display the DataFrame as a table in Streamlit
st.table(df9)



# Question No.11
st.write("What is the total number of households in each state")

#query for the question
mycursor.execute("Select `State/UT`, sum(Households) as Households from census_data group by `State/UT` order by `State/UT`")

# Fetching data from the relational database
myresult10 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df10=pd.DataFrame(myresult10)

# Display the DataFrame as a table in Streamlit
st.table(df10)



# Question No.12
st.write("How many households have a latrine facility within the premises in each state")

#query for the question
mycursor.execute("Select `State/UT`, sum(HouseholdsLatrineFacility) as HouseholdsLatrineFacility from census_data group by `State/UT` order by `State/UT`")

# Fetching data from the relational database
myresult11 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df11=pd.DataFrame(myresult11)

# Display the DataFrame as a table in Streamlit
st.table(df11)



# Question No.13
st.write("What is the average household size in each state")

#query for the question
mycursor.execute("Select `State/UT`, (avg(Household1Person) + avg(Household2Persons) + avg(Household1to2Persons) + avg(Household3Persons) + avg(Household3to5Persons) + avg(Household4Persons) + avg(Household5Persons) + avg(Household6to8Persons) + avg(Household9PlusPersons)) / 9 as average_household_size from census_data group by `State/UT` order by `State/UT`")

# Fetching data from the relational database
myresult12 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df12=pd.DataFrame(myresult12)

# Display the DataFrame as a table in Streamlit
st.table(df12)



# Question No.14
st.write("How many households are owned versus rented in each state")

#query for the question
mycursor.execute("Select `State/UT`, sum(OwnedHouseholds) as OwnedHouseholds, sum(RentedHouseholds) as RentedHouseholds from census_data group by `State/UT` order by `State/UT`")

# Fetching data from the relational database
myresult13 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df13=pd.DataFrame(myresult13)

# Display the DataFrame as a table in Streamlit
st.table(df13)



# Question No.15
st.write("What is the distribution of different types of latrine facilities (pit latrine, flush latrine, etc.) in each state")

#query for the question
mycursor.execute("Select `State/UT`, sum(HouseholdsPitLatrine) as HouseholdsPitLatrine, sum(HouseholdsOtherLatrine) as HouseholdsOtherLatrine, sum(HouseholdsNightSoilDrain) as HouseholdsNightSoilDrain, sum(HouseholdsFlushLatrineSystem) as HouseholdsFlushLatrineSystem from census_data group by `State/UT` order by `State/UT`")

# Fetching data from the relational database
myresult14 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df14=pd.DataFrame(myresult14)

# Display the DataFrame as a table in Streamlit
st.table(df14)



# Question No.16
st.write("How many households have access to drinking water sources near the premises in each state")

#query for the question
mycursor.execute("Select `State/UT`, sum(WaterSourceNearPremises)as WaterSourceNearPremises from census_data group by `State/UT`order by `State/UT`")

# Fetching data from the relational database
myresult15 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df15=pd.DataFrame(myresult15)

# Display the DataFrame as a table in Streamlit
st.table(df15)



# Question No.17
st.write("What is the average household income distribution in each state based on the power parity categories")

#query for the question
mycursor.execute("Select `State/UT`,(avg(PowerParityBelow45000) + avg(PowerParity45000to90000) + avg(PowerParity90000to150000) + avg(PowerParity45000to150000) + avg(PowerParity150000to240000) + avg(PowerParity240000to330000) + avg(PowerParity150000to330000) + avg(PowerParity330000to425000) + avg(PowerParity425000to545000) + avg(PowerParityAbove545000)) / 11 as average_household_income from census_data group by `State/UT` order by `State/UT`") 

# Fetching data from the relational database
myresult16 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df16=pd.DataFrame(myresult16)

# Display the DataFrame as a table in Streamlit
st.table(df16)



# Question No.18
st.write("What is the percentage of married couples with different household sizes in each state")

#query for the question
mycursor.execute("Select `State/UT`, (sum(Household1Couple) / sum(Households) *100), (sum(Household2Couples) / sum(Households) *100), (sum(Household3Couples) / sum(Households) *100), (sum(Household3PlusCouples) / sum(Households) *100), (sum(Household4Couples) / sum(Households) *100), (sum(Household5Couples) / sum(Households) *100), (sum(HouseholdNoCouples) / sum(Households) *100) from census_data group by `State/UT` order by `State/UT`")

# Fetching data from the relational database
myresult17 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df17=pd.DataFrame(myresult17)

# Display the DataFrame as a table in Streamlit
st.table(df17)



# Question No.19
st.write("How many households fall below the poverty line in each state based on the power parity categories")

#query for the question
mycursor.execute("Select `State/UT`, sum(PowerParityBelow45000) as households_poverty_line from census_data group by `State/UT` order by `State/UT`")

# Fetching data from the relational database
myresult18 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df18=pd.DataFrame(myresult18)

# Display the DataFrame as a table in Streamlit
st.table(df18)



# Question No.20
st.write("What is the overall literacy rate (percentage of literate population) in each state")

#query for the question
mycursor.execute("Select `State/UT`, (sum(Literate) / sum(Population)) * 100 as overall_literacy_rate from census_data group by `State/UT` order by `State/UT`")

# Fetching data from the relational database
myresult19 = mycursor.fetchall()

# Converting the fetched data into a DataFrame to show the result
df19=pd.DataFrame(myresult19)

# Display the DataFrame as a table in Streamlit
st.table(df19)
